{"version":3,"sources":["SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["PRIMARY_COLOR","SECONDARY_COLOR","TERTIARY_COLOR","sleep","ms","Promise","resolve","setTimeout","arraymove","arr","fromIndex","toIndex","element","splice","swapper","leftIdx","rightIdx","console","log","temp","SortingVisualizer","props","heapSort","a","arry","state","array","slice","size","length","buildMaxHeap","heapPop","i","color","setState","maxHeapify","Math","floor","maxIdx","height","insertionSort","sortedIndex","findIndex","el","bubbleSort","ANIMATION_SPEED_MS","j","mergeSort","auxArray","mergeSortHelper","start","end","middle","doMerge","b","c","quickSort","quickSortHelper","partition","left","right","pivotIdx","pivotValue","JSON","stringify","index","arrayLog","this","resetArray","min","max","push","random","Fragment","className","onClick","href","map","item","idx","style","backgroundColor","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oTAQMA,EAAgB,OAGhBC,EAAkB,aAGlBC,EAAiB,OAgBjBC,EAAQ,SAACC,GACX,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAaC,qBAAWD,EAASF,OAIxD,SAASI,EAAUC,EAAKC,EAAWC,GAC/B,IAAIC,EAAUH,EAAIC,GAClBD,EAAII,OAAOH,EAAW,GACtBD,EAAII,OAAOF,EAAS,EAAGC,GAI3B,SAASE,EAAQL,EAAKM,EAASC,GAC3BC,QAAQC,IAAI,iBAAmBH,EAAU,UAAYC,GACrD,IAAIG,EAAOV,EAAIM,GACfN,EAAIM,GAAWN,EAAIO,GACnBP,EAAIO,GAAYG,E,IASCC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAwBVC,SAzBmB,sBAyBR,8BAAAC,EAAA,6DACDC,EAAO,EAAKC,MAAMC,MAAMC,QAC1BC,EAAOJ,EAAKK,OAFT,SAID,EAAKC,aAAaN,EAAMI,GAJvB,uBAMD,EAAKG,QAAQP,EAAMI,GANlB,2CAzBQ,EAkCnBG,QAlCmB,uCAkCT,WAAOP,EAAMI,GAAb,eAAAL,EAAA,sDAEGS,EAAIJ,EAAO,EAFd,YAEiBI,GAAK,GAFtB,wBAGFR,EAAK,GAAGS,MAAQ/B,EAChBY,EAAQU,EAAM,EAAGQ,GACjB,EAAKE,SAAS,CAAER,MAAOF,IALrB,SAMI,EAAKW,WAAWX,EAAM,EAAGQ,GAN7B,OAEyBA,IAFzB,2DAlCS,0DA+CnBF,aA/CmB,uCA+CJ,WAAON,EAAMI,GAAb,eAAAL,EAAA,sDACXN,QAAQC,IAAI,qBAAuBU,GAG1BI,EAAII,KAAKC,MAAMT,EAAO,GAAK,EAJzB,YAI4BI,GAAK,GAJjC,gCAMD,EAAKG,WAAWX,EAAMQ,EAAGJ,GANxB,OAIoCI,IAJpC,0DA/CI,0DA8DnBG,WA9DmB,uCA8DN,WAAOX,EAAMQ,EAAGJ,GAAhB,mBAAAL,EAAA,yDAILR,EAAU,EAAIiB,EACdhB,EAAW,EAAIgB,EAAI,EACb,IAANA,IACAjB,EAAU,EACVC,EAAW,GAEfC,QAAQC,IAAI,kBAAoBc,EAAI,YAAcjB,EAAU,aAAeC,KAEvEA,EAAWY,GAZN,gBAcDU,EADAd,EAAKT,GAASwB,OAASf,EAAKR,GAAUuB,OAC7BxB,EAEAC,EAhBR,4BAkBED,EAAUa,GAlBZ,iBAmBLU,EAASvB,EAnBJ,+DAyBLS,EAAKQ,GAAGO,OAASf,EAAKc,GAAQC,QAzBzB,wBA0BLf,EAAKQ,GAAGC,MAAQhC,EAChBuB,EAAKc,GAAQL,MAAQhC,EACrBa,EAAQU,EAAMQ,EAAGM,GACjB,EAAKJ,SAAS,CAAER,MAAOF,IA7BlB,UA8BCrB,EAnIS,GAqGV,eAgCLqB,EAAKQ,GAAGC,MAAQjC,EAChBwB,EAAKc,GAAQL,MAAQjC,EACrB,EAAKkC,SAAS,CAAER,MAAOF,IAlClB,UAmCCrB,EAxIS,GAqGV,yBAqCC,EAAKgC,WAAWX,EAAMc,EAAQV,GArC/B,8EA9DM,4DAyGnBY,cAzGmB,sBAyGH,kCAAAjB,EAAA,sDACJG,EAAU,EAAKD,MAAfC,MADI,IAAAH,EAAA,iBAGHS,GAHG,SAAAT,EAAA,6DAIRG,EAAMM,GAAGC,MAAQhC,EACjB,EAAKiC,SAASR,GALN,SAMFvB,EAtJS,GAgJP,cAOJsC,EAAcf,EAAMgB,WACpB,SAACC,GAAD,OAAQA,EAAGJ,QAAUb,EAAMM,GAAGO,UAElC/B,EAAUkB,EAAOM,EAAGS,GACpBf,EAAMe,GAAaR,MAAQ/B,EAC3B,EAAKgC,SAASR,GAZN,UAcFvB,EA9JS,GAgJP,2CAGH6B,EAAI,EAHD,YAGIA,EAAIN,EAAMG,QAHd,yCAGHG,GAHG,eAGsBA,IAHtB,0DAzGG,EA4HnBY,WA5HmB,sBA4HN,gCAAArB,EAAA,6DACDG,EAAU,EAAKD,MAAfC,MACRT,QAAQC,IAAIQ,GAFH,SAGHvB,EAAM0C,KAHH,OAIAb,EAAI,EAJJ,YAIOA,EAAIN,EAAMG,OAAS,GAJ1B,iBAKIiB,EAAI,EALR,YAKWA,EAAIpB,EAAMG,OAAS,EAAIG,GALlC,wBAMDN,EAAMoB,GAAGb,MAAQhC,EACjByB,EAAMoB,EAAI,GAAGb,MAAQhC,EAPpB,UAQKE,EAAM0C,IARX,eASGnB,EAAMoB,EAAI,GAAGP,QAAUb,EAAMoB,GAAGP,QAChC/B,EAAUkB,EAAOoB,EAAGA,EAAI,GAE5B,EAAKZ,SAASR,GAZb,UAaKvB,EAAM0C,IAbX,QAcDnB,EAAMoB,GAAGb,MAAQjC,EACjB0B,EAAMoB,EAAI,GAAGb,MAAQ/B,EAfpB,QAKqC4C,IALrC,uBAI6Bd,IAJ7B,8BAkBTN,EAAM,GAAGO,MAAQ/B,EAlBR,UAmBHC,EAAM0C,IAnBH,QAoBT,EAAKX,SAASR,GACdT,QAAQC,IAAIQ,GArBH,4CA5HM,EAoJnBqB,UApJmB,sBAoJP,kCAAAxB,EAAA,6DACAG,EAAU,EAAKD,MAAfC,MACJF,EAAOE,EAAMC,QACbqB,EAAWxB,EAAKG,QAHZ,SAKF,EAAKsB,gBAAgBzB,EAAMwB,EAAU,EAAGxB,EAAKK,OAAS,GALpD,OAMR,IAASG,EAAI,EAAGA,EAAIN,EAAMG,OAAQG,IAC9BR,EAAKQ,GAAGC,MAAQ/B,EAEpB,EAAKgC,SAAS,CAAER,MAAOF,IATf,2CApJO,EAgKnByB,gBAhKmB,uCAgKD,WAAOzB,EAAMwB,EAAUE,EAAOC,GAA9B,eAAA5B,EAAA,yDACV2B,IAAUC,EADA,wDAIRC,EAAShB,KAAKC,OAAOa,EAAQC,GAAO,GAJ5B,SAMR,EAAKF,gBAAgBzB,EAAMwB,EAAUE,EAAOE,GANpC,uBAOR,EAAKH,gBAAgBzB,EAAMwB,EAAUI,EAAS,EAAGD,GAPzC,uBAQR,EAAKE,QAAQ7B,EAAMwB,EAAUE,EAAOE,EAAQD,GARpC,2CAhKC,8DA2KnBE,QA3KmB,uCA2KT,WAAO7B,EAAMwB,EAAUE,EAAOE,EAAQD,GAAtC,IAAA5B,EAAA,eAAAA,EAAA,sDAEFA,EAAI2B,EACJI,EAAIJ,EACJK,EAAIH,EAAS,EAJX,YAMCE,GAAKF,GAAUG,GAAKJ,GANrB,sBAOEH,EAASM,GAAGf,QAAUS,EAASO,GAAGhB,QAPpC,wBAQEf,EAAKD,GAAKyB,EAASM,GACnB,EAAKpB,SAAS,CAAER,MAAOF,IATzB,SAUQrB,EA5NK,GAkNb,OAWEoB,IACA+B,IAZF,+BAcE9B,EAAKD,GAAKyB,EAASO,GACnB,EAAKrB,SAAS,CAAER,MAAOF,IAfzB,UAgBQrB,EAlOK,GAkNb,QAiBEoB,IACAgC,IAlBF,oCAsBCD,GAAKF,GAtBN,wBAuBF5B,EAAKD,GAAKyB,EAASM,GACnB,EAAKpB,SAAS,CAAER,MAAOF,IAxBrB,UAyBIrB,EA3OS,GAkNb,QA0BFoB,IACA+B,IA3BE,6BA8BCC,GAAKJ,GA9BN,wBA+BF3B,EAAKD,GAAKyB,EAASO,GACnB,EAAKrB,SAAS,CAAER,MAAOF,IAhCrB,UAiCIrB,EAnPS,GAkNb,QAkCFoB,IACAgC,IAnCE,wBAuCN,IAASvB,EAAI,EAAGA,EAAIR,EAAKK,OAAQG,IAC7BgB,EAAShB,GAAKR,EAAKQ,GAxCjB,4CA3KS,gEA4NnBwB,UA5NmB,sBA4NP,8BAAAjC,EAAA,6DACJd,EAAM,EAAKgB,MAAMC,MAAMC,QADnB,SAGF,EAAK8B,gBAAgBhD,EAAK,EAAGA,EAAIoB,OAAS,GAHxC,OAKR,IADAZ,QAAQC,IAAI,kBACHc,EAAI,EAAGA,EAAIvB,EAAIoB,OAAQG,IAC5BvB,EAAIuB,GAAGC,MAAQ/B,EANX,OAQR,EAAKgC,SAAS,CAAER,MAAOjB,IARf,SASFN,EA5Qa,GAmQX,2CA5NO,EAwOnBuD,UAxOmB,uCAwOP,WAAOjD,EAAKkD,EAAMC,GAAlB,uBAAArC,EAAA,6DACFsC,EAAWzB,KAAKC,OAAOsB,EAAOC,GAAS,GACvCE,EAAarD,EAAIoD,GAAUtB,OAC7BP,EAAI2B,EACJb,EAAIc,EAERnD,EAAIoD,GAAU5B,MAAQhC,EACtB,EAAKiC,SAAS,CAAER,MAAOjB,IAPf,SAQFN,EAvRa,GA+QX,YAUD6B,GAAKc,GAVJ,iBAWJ,KAAOrC,EAAIuB,GAAGO,OAASuB,GACnB9B,IAGJ,KAAOvB,EAAIqC,GAAGP,OAASuB,GACnBhB,IAhBA,KAmBAd,GAAKc,GAnBL,wBAoBA7B,QAAQC,IAAI6C,KAAKC,UAAUvD,IAC3BK,EAAQL,EAAKuB,EAAGc,GAChB7B,QAAQC,IAAI6C,KAAKC,UAAUvD,IAC3B,EAAKyB,SAAS,CAAER,MAAOjB,IAvBvB,UAwBMN,EAvSK,GA+QX,QAyBA6B,IACAc,IA1BA,+BA8BR,IAASd,EAAI,EAAGA,EAAIvB,EAAIoB,OAAQG,IAC5BvB,EAAIuB,GAAGC,MAAQjC,EA/BX,OAkCR,EAAKkC,SAAS,CAAER,MAAOjB,IAlCf,UAmCFN,EAlTa,GA+QX,iCAqCD6B,GArCC,4CAxOO,4DAgRnByB,gBAhRmB,uCAgRD,WAAOhD,EAAKkD,EAAMC,GAAlB,eAAArC,EAAA,2DACVd,EAAIoB,OAAS,GADH,iEAKM,EAAK6B,UAAUjD,EAAKkD,EAAMC,GALhC,UAKRK,EALQ,SAMVN,EAAOM,EAAQ,GANL,gCAOJ,EAAKR,gBAAgBhD,EAAKkD,EAAMM,EAAQ,GAPpC,YASVL,EAAQK,GATE,kCAUJ,EAAKR,gBAAgBhD,EAAKwD,EAAOL,GAV7B,8EAhRC,4DAgSnBM,SAhSmB,sBAgSR,sBAAA3C,EAAA,sDACPN,QAAQC,IAAI,EAAKO,MAAMC,OADhB,2CA9RP,EAAKD,MAAQ,CACTC,MAAO,IAHI,E,gEASfyC,KAAKC,e,mCAOL,IAFA,IAnBuBC,EAAKC,EAmBtB5C,EAAQ,GAELM,EAAI,EAAGA,EA9CD,IA8CqBA,IAChCN,EAAM6C,KAAK,CACPhC,QAvBe8B,EA/BR,GA+BaC,EA5Bb,IA6BZlC,KAAKC,MAAMD,KAAKoC,UAAYF,EAAMD,EAAM,GAAKA,IAuBxCpC,MAAOjC,IAGfmE,KAAKjC,SAAS,CAAER,Y,+BA8QV,IAAD,OACGA,EAAUyC,KAAK1C,MAAfC,MAER,OAGI,cAFA,CAEC,IAAM+C,SAAP,WACI,sBAAKC,UAAU,aAAf,UACI,wBAAQC,QAAS,kBAAM,EAAKP,cAA5B,4BACA,wBAAQO,QAAS,kBAAM,EAAKnC,iBAA5B,4BACA,wBAAQmC,QAAS,kBAAM,EAAK5B,aAA5B,wBACA,wBAAQ4B,QAAS,kBAAM,EAAKnB,aAA5B,wBACA,wBAAQmB,QAAS,kBAAM,EAAKrD,YAA5B,uBACA,wBAAQqD,QAAS,kBAAM,EAAK/B,cAA5B,yBACA,mBAAGgC,KAAK,oCAAR,SAA4C,+CAGhD,qBAAKF,UAAU,kBAAf,SACKhD,EAAMmD,KAAI,SAACC,EAAMC,GAAP,OACP,qBACIL,UAAU,YAGVM,MAAO,CACHC,gBAAgB,GAAD,OAAKH,EAAK7C,OACzBM,OAAO,GAAD,OAAKuC,EAAKvC,OAAV,QAJLwC,e,GA1TcG,IAAMC,W,MC3CtCC,MARf,WACE,OACE,qBAAKV,UAAU,MAAf,SACE,cAAC,EAAD,OCKSW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4e62085d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./SortingVisualizer.css\";\r\nimport { setTimeout } from \"timers\";\r\n\r\n// TODO: move algos to separate file.\r\n//import { mergeSortHelper } from \"../mergeSort\";\r\n\r\n// Original color of the array bars.\r\nconst PRIMARY_COLOR = \"aqua\";\r\n\r\n// Color for when we are comparing array bars.\r\nconst SECONDARY_COLOR = \"lightgreen\";\r\n\r\n// Color for sorted final bar.\r\nconst TERTIARY_COLOR = \"gold\"\r\n\r\n// Speed of the animation in ms.\r\nconst ANIMATION_SPEED_MS = 3;\r\n\r\n// Lower bound height for bars\r\nconst LOWER_INTERVAL = 15;\r\n\r\n// Upper bound height for bars.\r\nconst UPPER_INTERVAL = 400;\r\n\r\n// Number of array bars.\r\nconst NUMBER_OF_BARS = 129;\r\n\r\n// Javascript sleep() best practice found at:\r\n// https://stackoverflow.com/questions/951021/what-is-the-javascript-version-of-sleep/39914235#39914235\r\nconst sleep = (ms) => {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n};\r\n\r\n// Function to move elements from one index to another.\r\nfunction arraymove(arr, fromIndex, toIndex) {\r\n    var element = arr[fromIndex];\r\n    arr.splice(fromIndex, 1);\r\n    arr.splice(toIndex, 0, element);\r\n}\r\n\r\n// Function to swap elements in an array.\r\nfunction swapper(arr, leftIdx, rightIdx) {\r\n    console.log('swapper  left:' + leftIdx + ' right:' + rightIdx);\r\n    var temp = arr[leftIdx];\r\n    arr[leftIdx] = arr[rightIdx];\r\n    arr[rightIdx] = temp;\r\n}\r\n\r\n// Generates random Integer in given interval.\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntfromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: []\r\n        };\r\n    }\r\n\r\n    // React function runs first time component is rendered, client side only.\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    // Generates a new array and sets it to the state.\r\n    resetArray() {\r\n        const array = [];\r\n        // let numBars = randomIntfromInterval(LOWER_INTERVAL, UPPER_INTERVAL);\r\n        for (let i = 0; i < NUMBER_OF_BARS; i++) {\r\n            array.push({\r\n                height: randomIntfromInterval(LOWER_INTERVAL, UPPER_INTERVAL),\r\n                color: PRIMARY_COLOR\r\n            });\r\n        }\r\n        this.setState({ array });\r\n    }\r\n\r\n    heapSort = async () => {\r\n        const arry = this.state.array.slice();\r\n        let size = arry.length;\r\n\r\n        await this.buildMaxHeap(arry, size);\r\n\r\n        await this.heapPop(arry, size);\r\n    }\r\n\r\n    heapPop = async (arry, size) => {\r\n\r\n        for (let i = size - 1; i >= 0; i--) {\r\n            arry[0].color = TERTIARY_COLOR;\r\n            swapper(arry, 0, i);\r\n            this.setState({ array: arry });\r\n            await this.maxHeapify(arry, 0, i);\r\n        }\r\n    }\r\n\r\n    // Converts A[1..n] into a max heap\r\n    // for i = n/2 down to 1\r\n    // do maxHeapify (A, i)\r\n    buildMaxHeap = async (arry, size) => {\r\n        console.log('buildMaxHeap size:' + size);\r\n\r\n        // -1 here cause array indexes start at 0\r\n        for (let i = Math.floor(size / 2) - 1; i >= 0; i--) {\r\n            // console.log(i);\r\n            await this.maxHeapify(arry, i, size);\r\n        }\r\n    }\r\n\r\n    // root of tree: first element (i = 1)\r\n    // parent(i) = i/2;\r\n    // left(i) = 2i;\r\n    // right(i) = 2i + 1;\r\n    // size = arraylength\r\n    maxHeapify = async (arry, i, size) => {\r\n        \r\n        // this causes bug sometimes when biggest value is on the wrong side\r\n        let maxIdx;\r\n        let leftIdx = 2 * i;\r\n        let rightIdx = 2 * i + 1;\r\n        if (i === 0) {\r\n            leftIdx = 1;\r\n            rightIdx = 2;\r\n        }\r\n        console.log('maxHeapify:  i:' + i + ' leftIdx:' + leftIdx + ' rightIdx:' + rightIdx);\r\n\r\n        if (rightIdx < size) {\r\n            if (arry[leftIdx].height > arry[rightIdx].height) {\r\n                maxIdx = leftIdx;\r\n            } else {\r\n                maxIdx = rightIdx;\r\n            }\r\n        } else if (leftIdx < size) {\r\n            maxIdx = leftIdx;\r\n\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        if (arry[i].height < arry[maxIdx].height) {\r\n            arry[i].color = SECONDARY_COLOR;\r\n            arry[maxIdx].color = SECONDARY_COLOR;\r\n            swapper(arry, i, maxIdx);\r\n            this.setState({ array: arry });\r\n            await sleep(ANIMATION_SPEED_MS);\r\n\r\n            arry[i].color = PRIMARY_COLOR;\r\n            arry[maxIdx].color = PRIMARY_COLOR;\r\n            this.setState({ array: arry });\r\n            await sleep(ANIMATION_SPEED_MS);\r\n\r\n            await this.maxHeapify(arry, maxIdx, size);\r\n        }\r\n        return;\r\n    }\r\n\r\n    // Insertion sort algorithm \r\n    insertionSort = async () => {\r\n        const { array } = this.state;\r\n\r\n        for (let i = 0; i < array.length; i++) {\r\n            array[i].color = SECONDARY_COLOR;\r\n            this.setState(array);\r\n            await sleep(ANIMATION_SPEED_MS);\r\n            var sortedIndex = array.findIndex(\r\n                (el) => el.height >= array[i].height\r\n            );\r\n            arraymove(array, i, sortedIndex);\r\n            array[sortedIndex].color = TERTIARY_COLOR;\r\n            this.setState(array);\r\n\r\n            await sleep(ANIMATION_SPEED_MS);\r\n        }\r\n    }\r\n\r\n    // Bubble sort algorithm\r\n    bubbleSort = async () => {\r\n        const { array } = this.state;\r\n        console.log(array);\r\n        await sleep(ANIMATION_SPEED_MS / 2);\r\n        for (let i = 0; i < array.length - 1; i++) {\r\n            for (let j = 0; j < array.length - 1 - i; j++) {\r\n                array[j].color = SECONDARY_COLOR;\r\n                array[j + 1].color = SECONDARY_COLOR;\r\n                await sleep(ANIMATION_SPEED_MS / 10);\r\n                if (array[j + 1].height <= array[j].height) {\r\n                    arraymove(array, j, j + 1);\r\n                }\r\n                this.setState(array);\r\n                await sleep(ANIMATION_SPEED_MS / 10);\r\n                array[j].color = PRIMARY_COLOR;\r\n                array[j + 1].color = TERTIARY_COLOR;\r\n            }\r\n        }\r\n        array[0].color = TERTIARY_COLOR;  // Change last bar to finished color.\r\n        await sleep(ANIMATION_SPEED_MS / 10);\r\n        this.setState(array);\r\n        console.log(array);\r\n    }\r\n\r\n    mergeSort = async () => {\r\n        const { array } = this.state;\r\n        let arry = array.slice();\r\n        let auxArray = arry.slice();\r\n\r\n        await this.mergeSortHelper(arry, auxArray, 0, arry.length - 1);\r\n        for (let i = 0; i < array.length; i++) {\r\n            arry[i].color = TERTIARY_COLOR;\r\n        }\r\n        this.setState({ array: arry });\r\n    }\r\n\r\n    mergeSortHelper = async (arry, auxArray, start, end) => {\r\n        if (start === end) {\r\n            return;\r\n        }\r\n        const middle = Math.floor((start + end) / 2);\r\n\r\n        await this.mergeSortHelper(arry, auxArray, start, middle);\r\n        await this.mergeSortHelper(arry, auxArray, middle + 1, end);\r\n        await this.doMerge(arry, auxArray, start, middle, end);\r\n    }\r\n\r\n    doMerge = async (arry, auxArray, start, middle, end) => {\r\n        // const { array } = this.state;\r\n        let a = start;  //arry start\r\n        let b = start;  //auxArray start\r\n        let c = middle + 1; //mid start\r\n\r\n        while (b <= middle && c <= end) {\r\n            if (auxArray[b].height <= auxArray[c].height) {\r\n                arry[a] = auxArray[b];\r\n                this.setState({ array: arry });\r\n                await sleep(ANIMATION_SPEED_MS);\r\n                a++;\r\n                b++;\r\n            } else {\r\n                arry[a] = auxArray[c];\r\n                this.setState({ array: arry });\r\n                await sleep(ANIMATION_SPEED_MS);\r\n                a++;\r\n                c++;\r\n            }\r\n        }\r\n\r\n        while (b <= middle) {\r\n            arry[a] = auxArray[b];\r\n            this.setState({ array: arry });\r\n            await sleep(ANIMATION_SPEED_MS);\r\n            a++;\r\n            b++;\r\n        }\r\n\r\n        while (c <= end) {\r\n            arry[a] = auxArray[c];\r\n            this.setState({ array: arry });\r\n            await sleep(ANIMATION_SPEED_MS);\r\n            a++;\r\n            c++;\r\n        }\r\n\r\n        // Set auxArray to be the same as arry before next recursive call.\r\n        for (let i = 0; i < arry.length; i++) {\r\n            auxArray[i] = arry[i];\r\n        }\r\n    }\r\n\r\n    //console.log(JSON.stringify(obj));\r\n\r\n    // Quicksort implementation from:\r\n    // https://medium.com/@kasho/quick-sort-algorithm-in-javascript-5432a06e5b7a\r\n\r\n    quickSort = async () => {\r\n        let arr = this.state.array.slice();\r\n\r\n        await this.quickSortHelper(arr, 0, arr.length - 1);\r\n        console.log('quicksort done');\r\n        for (let i = 0; i < arr.length; i++) {\r\n            arr[i].color = TERTIARY_COLOR;\r\n        }\r\n        this.setState({ array: arr });\r\n        await sleep(ANIMATION_SPEED_MS);\r\n    }\r\n\r\n    partition = async (arr, left, right) => {\r\n        const pivotIdx = Math.floor((left + right) / 2);\r\n        const pivotValue = arr[pivotIdx].height;\r\n        let i = left;\r\n        let j = right;\r\n\r\n        arr[pivotIdx].color = SECONDARY_COLOR;\r\n        this.setState({ array: arr });\r\n        await sleep(ANIMATION_SPEED_MS);\r\n\r\n        while (i <= j) {\r\n            while (arr[i].height < pivotValue) {\r\n                i++;\r\n            }\r\n\r\n            while (arr[j].height > pivotValue) {\r\n                j--;\r\n            }\r\n\r\n            if (i <= j) {\r\n                console.log(JSON.stringify(arr));\r\n                swapper(arr, i, j);\r\n                console.log(JSON.stringify(arr));\r\n                this.setState({ array: arr });\r\n                await sleep(ANIMATION_SPEED_MS);\r\n                i++;\r\n                j--;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            arr[i].color = PRIMARY_COLOR;\r\n        }\r\n\r\n        this.setState({ array: arr });\r\n        await sleep(ANIMATION_SPEED_MS);\r\n\r\n        return i;\r\n    }\r\n\r\n    quickSortHelper = async (arr, left, right) => {\r\n        if (arr.length < 2) {\r\n            return;\r\n        }\r\n\r\n        const index = await this.partition(arr, left, right);\r\n        if (left < index - 1) {\r\n            await this.quickSortHelper(arr, left, index - 1);\r\n        }\r\n        if (right > index) {\r\n            await this.quickSortHelper(arr, index, right);\r\n        }\r\n        return;\r\n\r\n    }\r\n\r\n    arrayLog = async () => {\r\n        console.log(this.state.array);\r\n    }\r\n\r\n    render() {\r\n        const { array } = this.state;\r\n\r\n        return (\r\n            // Arrow function to use \"this\" context in the resetArray callback function: this.setState({array}).\r\n            // React.Fragment allows us to return multiple elements under the same DOM.\r\n            <React.Fragment>\r\n                <div className=\"button-bar\">\r\n                    <button onClick={() => this.resetArray()}>Generate Array</button>\r\n                    <button onClick={() => this.insertionSort()}>Insertion Sort</button>\r\n                    <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                    <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n                    <button onClick={() => this.heapSort()}>Heap Sort</button>\r\n                    <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n                    <a href=\"http://patgiok.azurewebsites.net/\"><button>Home</button></a>\r\n                    {/* <button onClick={() => this.arrayLog()}>Array Log</button> */}\r\n                </div>\r\n                <div className=\"array-container\">\r\n                    {array.map((item, idx) => (\r\n                        <div\r\n                            className=\"array-bar\"\r\n                            key={idx}\r\n                            // $ dollarsign makes a css variable???\r\n                            style={{\r\n                                backgroundColor: `${item.color}`,\r\n                                height: `${item.height}px`\r\n                            }}\r\n                        ></div>\r\n                    ))}\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}